using System.Numerics;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Goobstation.Shared.Blob.Components;
using Robust.Client.GameObjects;
using Content.Client.Stylesheets;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.Blob
{
    [GenerateTypedNameReferences]
    public sealed partial class BlobChemSwapMenu : RadialMenu
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;
        private readonly SpriteSystem _sprite;
        public event Action<BlobChemType>? OnIdSelected;

        private Shared.Blob.BlobChemColors _possibleChems = new();
        private BlobChemType _selectedId;

        public BlobChemSwapMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _sprite = _entityManager.System<SpriteSystem>();
        }

        public void UpdateState(Shared.Blob.BlobChemColors chemList, BlobChemType selectedChem)
        {
            _possibleChems = chemList;
            _selectedId = selectedChem;
            UpdateMenu();
        }

        protected override void EnteredTree()
        {
            UpdateMenu();
        }

        protected override void ExitedTree()
        {
            ClearMenu();
        }

        [ValidatePrototypeId<EntityPrototype>]
        private const string NormalBlobTile = "NormalBlobTile";

        private void UpdateMenu()
        {
            ClearMenu();

            foreach (var (blobChem, blobColor) in _possibleChems)
            {
                if (!_prototypeManager.TryIndex(NormalBlobTile, out EntityPrototype? proto))
                    continue;

                var button = new BlobRadialMenuButton
                {
                    MinSize = new Vector2(64, 64),
                    ToggleMode = true,
                    Pressed = _selectedId == blobChem,
                    ToolTip = Loc.GetString($"blob-chem-{blobChem.ToString().ToLower()}-info"),
                    TooltipDelay = 0.25f,
                };

                button.OnButtonUp += _ => OnIdSelected?.Invoke(blobChem);

                var texture = _sprite.GetPrototypeIcon(proto);
                var textureRect = new TextureRect
                {
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    Modulate = blobColor,
                    Texture = texture.Default,
                };

                button.AddChild(textureRect);
                Main.AddChild(button);
            }
        }

        private void ClearMenu()
        {
            Main.RemoveAllChildren();
        }
    }
}
public sealed class BlobRadialMenuButton : RadialMenuTextureButtonWithSector;
